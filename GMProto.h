// **********************************************************************
// This file was generated by a TARS parser!
// TARS version 2.4.7.
// **********************************************************************

#ifndef __GMPROTO_H_
#define __GMPROTO_H_

#include <map>
#include <string>
#include <vector>
#include "tup/Tars.h"
#include "tup/TarsJson.h"
using namespace std;


namespace gm
{
    enum E_BUSINESS_TYPE
    {
        E_BUSINESS_TYPE_NONE = 0,
        E_PLAYER_DATA_MODIFY_LIST = 11001,
        E_PLAYER_DATA_MODIFY_INSERT_UPDATE = 11002,
        E_PLAYER_DATA_MODIFY_WHITE_LIST = 11003,
        E_GLOBAL_EMAIL_LIST = 12001,
        E_GLOBAL_EMAIL_INSERT_UPDATE = 12002,
        E_GLOBAL_EMAIL_DETAIL = 12004,
        E_GLOBAL_EMAIL_DELETE = 12005,
        E_GLOBAL_EMAIL_CONFIG_RELOAD = 12006,
        E_PERSONAL_EMAIL_LIST = 13001,
        E_PERSONAL_EMAIL_INSERT_UPDATE = 13002,
        E_PERSONAL_EMAIL_DETAIL = 13004,
        E_PERSONAL_EMAIL_DELETE = 13005,
        E_MARQUEE_LIST = 14001,
        E_MARQUEE_INSERT_UPDATE = 14002,
        E_MARQUEE_DETAIL = 14004,
        E_MARQUEE_DELETE = 14005,
        E_SYS_INFO_CONFIG_LIST = 15001,
        E_SYS_INFO_CONFIG_INSERT_UPDATE = 15002,
        E_SYS_INFO_CONFIG_DETAIL = 15004,
        E_SYS_INFO_CONFIG_DELETE = 15005,
        E_RANBOARD_LIST = 16001,
        E_RANBOARD_INSRET_UPDATE = 16002,
        E_RANBOARD_DELETE = 16005,
        E_SERVICE_CHARGE_LIST = 17001,
        E_SERVICE_CHARGE_INSERT_UPDATE = 17002,
        E_MATCH_BASIC_CONFIG_LIST = 18001,
        E_MATCH_BASIC_CONFIG_INSERT_UPDATE = 18002,
        E_MATCH_BASIC_CONFIG_DETAIL = 18004,
        E_MATCH_BASIC_CONFIG_DELETE = 18005,
        E_MATCH_RULE_CONFIG_LIST = 19001,
        E_MATCH_RULE_CONFIG_INSERT_UPDATE = 19002,
        E_MATCH_RULE_CONFIG_DELETE = 19005,
        E_MATCH_REWARD_CONFIG_LIST = 21001,
        E_MATCH_REWARD_CONFIG_INSERT_UPDATE = 21002,
        E_MATCH_REWARD_CONFIG_DELETE = 21005,
        E_CERTAIN_VICTORY_CONFIG_LIST = 22001,
        E_CERTAIN_VICTORY_CONFIG_INSERT_UPDATE = 22002,
        E_CERTAIN_VICTORY_CONFIG_DETAIL = 22004,
        E_CERTAIN_VICTORY_CONFIG_DELETE = 22005,
        E_MALL_LIST = 23001,
        E_MALL_INSERT_UPDATE = 23002,
        E_MALL_DELETE = 23005,
        E_PROPS_CONFIG_LIST = 24001,
        E_PROPS_CONFIG_INSERT_UPDATE = 24002,
        E_PROPS_CONFIG_DELETE = 24005,
        E_GOODS_CONFIG_INSERT_UPDATE = 24501,
        E_AI_CONFIG_LIST = 25001,
        E_AI_CONFIG_INSERT_UPDATE = 25002,
        E_AI_CONFIG_DELETE = 25005,
        E_REWARD_POOL_MANAGER_LIST = 26001,
        E_REWARD_POOL_MANAGER_INSERT_UPDATE = 26002,
        E_REWARD_POOL_MANAGER_DELETE = 26005,
        E_PROPS_REWARD_CONFIG_LIST = 27001,
        E_PROPS_REWARD_CONFIG_INSERT_UPDATE = 27002,
        E_PROPS_REWARD_CONFIG_DELETE = 27005,
        E_DB_CONFIG_RELOAD = 28001,
        E_DB_EXCHANGECODECONFIG_RELOAD = 28002,
        E_ONLINE_INFO_LIST = 29001,
        E_ARRANGE_CARD = 30000,
        E_ADS_GOOGLE_NOTIFY = 40000,
        E_ADS_FACEBOOK_NOTIFY = 40001,
        E_ADS_UNITY_NOTIFY = 40002,
        E_EXCHANGECODE_UPDATE = 41000,
        E_SERVER_UPDATE_NOTIFY = 50000,
        E_MODIFY_USER_INFO_REGISTER_TIME = 60000,
        E_MODIFY_USER_INFO_SAFE_MAIL = 60001,
    };
    inline string etos(const E_BUSINESS_TYPE & e)
    {
        switch(e)
        {
            case E_BUSINESS_TYPE_NONE: return "E_BUSINESS_TYPE_NONE";
            case E_PLAYER_DATA_MODIFY_LIST: return "E_PLAYER_DATA_MODIFY_LIST";
            case E_PLAYER_DATA_MODIFY_INSERT_UPDATE: return "E_PLAYER_DATA_MODIFY_INSERT_UPDATE";
            case E_PLAYER_DATA_MODIFY_WHITE_LIST: return "E_PLAYER_DATA_MODIFY_WHITE_LIST";
            case E_GLOBAL_EMAIL_LIST: return "E_GLOBAL_EMAIL_LIST";
            case E_GLOBAL_EMAIL_INSERT_UPDATE: return "E_GLOBAL_EMAIL_INSERT_UPDATE";
            case E_GLOBAL_EMAIL_DETAIL: return "E_GLOBAL_EMAIL_DETAIL";
            case E_GLOBAL_EMAIL_DELETE: return "E_GLOBAL_EMAIL_DELETE";
            case E_GLOBAL_EMAIL_CONFIG_RELOAD: return "E_GLOBAL_EMAIL_CONFIG_RELOAD";
            case E_PERSONAL_EMAIL_LIST: return "E_PERSONAL_EMAIL_LIST";
            case E_PERSONAL_EMAIL_INSERT_UPDATE: return "E_PERSONAL_EMAIL_INSERT_UPDATE";
            case E_PERSONAL_EMAIL_DETAIL: return "E_PERSONAL_EMAIL_DETAIL";
            case E_PERSONAL_EMAIL_DELETE: return "E_PERSONAL_EMAIL_DELETE";
            case E_MARQUEE_LIST: return "E_MARQUEE_LIST";
            case E_MARQUEE_INSERT_UPDATE: return "E_MARQUEE_INSERT_UPDATE";
            case E_MARQUEE_DETAIL: return "E_MARQUEE_DETAIL";
            case E_MARQUEE_DELETE: return "E_MARQUEE_DELETE";
            case E_SYS_INFO_CONFIG_LIST: return "E_SYS_INFO_CONFIG_LIST";
            case E_SYS_INFO_CONFIG_INSERT_UPDATE: return "E_SYS_INFO_CONFIG_INSERT_UPDATE";
            case E_SYS_INFO_CONFIG_DETAIL: return "E_SYS_INFO_CONFIG_DETAIL";
            case E_SYS_INFO_CONFIG_DELETE: return "E_SYS_INFO_CONFIG_DELETE";
            case E_RANBOARD_LIST: return "E_RANBOARD_LIST";
            case E_RANBOARD_INSRET_UPDATE: return "E_RANBOARD_INSRET_UPDATE";
            case E_RANBOARD_DELETE: return "E_RANBOARD_DELETE";
            case E_SERVICE_CHARGE_LIST: return "E_SERVICE_CHARGE_LIST";
            case E_SERVICE_CHARGE_INSERT_UPDATE: return "E_SERVICE_CHARGE_INSERT_UPDATE";
            case E_MATCH_BASIC_CONFIG_LIST: return "E_MATCH_BASIC_CONFIG_LIST";
            case E_MATCH_BASIC_CONFIG_INSERT_UPDATE: return "E_MATCH_BASIC_CONFIG_INSERT_UPDATE";
            case E_MATCH_BASIC_CONFIG_DETAIL: return "E_MATCH_BASIC_CONFIG_DETAIL";
            case E_MATCH_BASIC_CONFIG_DELETE: return "E_MATCH_BASIC_CONFIG_DELETE";
            case E_MATCH_RULE_CONFIG_LIST: return "E_MATCH_RULE_CONFIG_LIST";
            case E_MATCH_RULE_CONFIG_INSERT_UPDATE: return "E_MATCH_RULE_CONFIG_INSERT_UPDATE";
            case E_MATCH_RULE_CONFIG_DELETE: return "E_MATCH_RULE_CONFIG_DELETE";
            case E_MATCH_REWARD_CONFIG_LIST: return "E_MATCH_REWARD_CONFIG_LIST";
            case E_MATCH_REWARD_CONFIG_INSERT_UPDATE: return "E_MATCH_REWARD_CONFIG_INSERT_UPDATE";
            case E_MATCH_REWARD_CONFIG_DELETE: return "E_MATCH_REWARD_CONFIG_DELETE";
            case E_CERTAIN_VICTORY_CONFIG_LIST: return "E_CERTAIN_VICTORY_CONFIG_LIST";
            case E_CERTAIN_VICTORY_CONFIG_INSERT_UPDATE: return "E_CERTAIN_VICTORY_CONFIG_INSERT_UPDATE";
            case E_CERTAIN_VICTORY_CONFIG_DETAIL: return "E_CERTAIN_VICTORY_CONFIG_DETAIL";
            case E_CERTAIN_VICTORY_CONFIG_DELETE: return "E_CERTAIN_VICTORY_CONFIG_DELETE";
            case E_MALL_LIST: return "E_MALL_LIST";
            case E_MALL_INSERT_UPDATE: return "E_MALL_INSERT_UPDATE";
            case E_MALL_DELETE: return "E_MALL_DELETE";
            case E_PROPS_CONFIG_LIST: return "E_PROPS_CONFIG_LIST";
            case E_PROPS_CONFIG_INSERT_UPDATE: return "E_PROPS_CONFIG_INSERT_UPDATE";
            case E_PROPS_CONFIG_DELETE: return "E_PROPS_CONFIG_DELETE";
            case E_GOODS_CONFIG_INSERT_UPDATE: return "E_GOODS_CONFIG_INSERT_UPDATE";
            case E_AI_CONFIG_LIST: return "E_AI_CONFIG_LIST";
            case E_AI_CONFIG_INSERT_UPDATE: return "E_AI_CONFIG_INSERT_UPDATE";
            case E_AI_CONFIG_DELETE: return "E_AI_CONFIG_DELETE";
            case E_REWARD_POOL_MANAGER_LIST: return "E_REWARD_POOL_MANAGER_LIST";
            case E_REWARD_POOL_MANAGER_INSERT_UPDATE: return "E_REWARD_POOL_MANAGER_INSERT_UPDATE";
            case E_REWARD_POOL_MANAGER_DELETE: return "E_REWARD_POOL_MANAGER_DELETE";
            case E_PROPS_REWARD_CONFIG_LIST: return "E_PROPS_REWARD_CONFIG_LIST";
            case E_PROPS_REWARD_CONFIG_INSERT_UPDATE: return "E_PROPS_REWARD_CONFIG_INSERT_UPDATE";
            case E_PROPS_REWARD_CONFIG_DELETE: return "E_PROPS_REWARD_CONFIG_DELETE";
            case E_DB_CONFIG_RELOAD: return "E_DB_CONFIG_RELOAD";
            case E_DB_EXCHANGECODECONFIG_RELOAD: return "E_DB_EXCHANGECODECONFIG_RELOAD";
            case E_ONLINE_INFO_LIST: return "E_ONLINE_INFO_LIST";
            case E_ARRANGE_CARD: return "E_ARRANGE_CARD";
            case E_ADS_GOOGLE_NOTIFY: return "E_ADS_GOOGLE_NOTIFY";
            case E_ADS_FACEBOOK_NOTIFY: return "E_ADS_FACEBOOK_NOTIFY";
            case E_ADS_UNITY_NOTIFY: return "E_ADS_UNITY_NOTIFY";
            case E_EXCHANGECODE_UPDATE: return "E_EXCHANGECODE_UPDATE";
            case E_SERVER_UPDATE_NOTIFY: return "E_SERVER_UPDATE_NOTIFY";
            case E_MODIFY_USER_INFO_REGISTER_TIME: return "E_MODIFY_USER_INFO_REGISTER_TIME";
            case E_MODIFY_USER_INFO_SAFE_MAIL: return "E_MODIFY_USER_INFO_SAFE_MAIL";
            default: return "";
        }
    }
    inline int stoe(const string & s, E_BUSINESS_TYPE & e)
    {
        if(s == "E_BUSINESS_TYPE_NONE")  { e=E_BUSINESS_TYPE_NONE; return 0;}
        if(s == "E_PLAYER_DATA_MODIFY_LIST")  { e=E_PLAYER_DATA_MODIFY_LIST; return 0;}
        if(s == "E_PLAYER_DATA_MODIFY_INSERT_UPDATE")  { e=E_PLAYER_DATA_MODIFY_INSERT_UPDATE; return 0;}
        if(s == "E_PLAYER_DATA_MODIFY_WHITE_LIST")  { e=E_PLAYER_DATA_MODIFY_WHITE_LIST; return 0;}
        if(s == "E_GLOBAL_EMAIL_LIST")  { e=E_GLOBAL_EMAIL_LIST; return 0;}
        if(s == "E_GLOBAL_EMAIL_INSERT_UPDATE")  { e=E_GLOBAL_EMAIL_INSERT_UPDATE; return 0;}
        if(s == "E_GLOBAL_EMAIL_DETAIL")  { e=E_GLOBAL_EMAIL_DETAIL; return 0;}
        if(s == "E_GLOBAL_EMAIL_DELETE")  { e=E_GLOBAL_EMAIL_DELETE; return 0;}
        if(s == "E_GLOBAL_EMAIL_CONFIG_RELOAD")  { e=E_GLOBAL_EMAIL_CONFIG_RELOAD; return 0;}
        if(s == "E_PERSONAL_EMAIL_LIST")  { e=E_PERSONAL_EMAIL_LIST; return 0;}
        if(s == "E_PERSONAL_EMAIL_INSERT_UPDATE")  { e=E_PERSONAL_EMAIL_INSERT_UPDATE; return 0;}
        if(s == "E_PERSONAL_EMAIL_DETAIL")  { e=E_PERSONAL_EMAIL_DETAIL; return 0;}
        if(s == "E_PERSONAL_EMAIL_DELETE")  { e=E_PERSONAL_EMAIL_DELETE; return 0;}
        if(s == "E_MARQUEE_LIST")  { e=E_MARQUEE_LIST; return 0;}
        if(s == "E_MARQUEE_INSERT_UPDATE")  { e=E_MARQUEE_INSERT_UPDATE; return 0;}
        if(s == "E_MARQUEE_DETAIL")  { e=E_MARQUEE_DETAIL; return 0;}
        if(s == "E_MARQUEE_DELETE")  { e=E_MARQUEE_DELETE; return 0;}
        if(s == "E_SYS_INFO_CONFIG_LIST")  { e=E_SYS_INFO_CONFIG_LIST; return 0;}
        if(s == "E_SYS_INFO_CONFIG_INSERT_UPDATE")  { e=E_SYS_INFO_CONFIG_INSERT_UPDATE; return 0;}
        if(s == "E_SYS_INFO_CONFIG_DETAIL")  { e=E_SYS_INFO_CONFIG_DETAIL; return 0;}
        if(s == "E_SYS_INFO_CONFIG_DELETE")  { e=E_SYS_INFO_CONFIG_DELETE; return 0;}
        if(s == "E_RANBOARD_LIST")  { e=E_RANBOARD_LIST; return 0;}
        if(s == "E_RANBOARD_INSRET_UPDATE")  { e=E_RANBOARD_INSRET_UPDATE; return 0;}
        if(s == "E_RANBOARD_DELETE")  { e=E_RANBOARD_DELETE; return 0;}
        if(s == "E_SERVICE_CHARGE_LIST")  { e=E_SERVICE_CHARGE_LIST; return 0;}
        if(s == "E_SERVICE_CHARGE_INSERT_UPDATE")  { e=E_SERVICE_CHARGE_INSERT_UPDATE; return 0;}
        if(s == "E_MATCH_BASIC_CONFIG_LIST")  { e=E_MATCH_BASIC_CONFIG_LIST; return 0;}
        if(s == "E_MATCH_BASIC_CONFIG_INSERT_UPDATE")  { e=E_MATCH_BASIC_CONFIG_INSERT_UPDATE; return 0;}
        if(s == "E_MATCH_BASIC_CONFIG_DETAIL")  { e=E_MATCH_BASIC_CONFIG_DETAIL; return 0;}
        if(s == "E_MATCH_BASIC_CONFIG_DELETE")  { e=E_MATCH_BASIC_CONFIG_DELETE; return 0;}
        if(s == "E_MATCH_RULE_CONFIG_LIST")  { e=E_MATCH_RULE_CONFIG_LIST; return 0;}
        if(s == "E_MATCH_RULE_CONFIG_INSERT_UPDATE")  { e=E_MATCH_RULE_CONFIG_INSERT_UPDATE; return 0;}
        if(s == "E_MATCH_RULE_CONFIG_DELETE")  { e=E_MATCH_RULE_CONFIG_DELETE; return 0;}
        if(s == "E_MATCH_REWARD_CONFIG_LIST")  { e=E_MATCH_REWARD_CONFIG_LIST; return 0;}
        if(s == "E_MATCH_REWARD_CONFIG_INSERT_UPDATE")  { e=E_MATCH_REWARD_CONFIG_INSERT_UPDATE; return 0;}
        if(s == "E_MATCH_REWARD_CONFIG_DELETE")  { e=E_MATCH_REWARD_CONFIG_DELETE; return 0;}
        if(s == "E_CERTAIN_VICTORY_CONFIG_LIST")  { e=E_CERTAIN_VICTORY_CONFIG_LIST; return 0;}
        if(s == "E_CERTAIN_VICTORY_CONFIG_INSERT_UPDATE")  { e=E_CERTAIN_VICTORY_CONFIG_INSERT_UPDATE; return 0;}
        if(s == "E_CERTAIN_VICTORY_CONFIG_DETAIL")  { e=E_CERTAIN_VICTORY_CONFIG_DETAIL; return 0;}
        if(s == "E_CERTAIN_VICTORY_CONFIG_DELETE")  { e=E_CERTAIN_VICTORY_CONFIG_DELETE; return 0;}
        if(s == "E_MALL_LIST")  { e=E_MALL_LIST; return 0;}
        if(s == "E_MALL_INSERT_UPDATE")  { e=E_MALL_INSERT_UPDATE; return 0;}
        if(s == "E_MALL_DELETE")  { e=E_MALL_DELETE; return 0;}
        if(s == "E_PROPS_CONFIG_LIST")  { e=E_PROPS_CONFIG_LIST; return 0;}
        if(s == "E_PROPS_CONFIG_INSERT_UPDATE")  { e=E_PROPS_CONFIG_INSERT_UPDATE; return 0;}
        if(s == "E_PROPS_CONFIG_DELETE")  { e=E_PROPS_CONFIG_DELETE; return 0;}
        if(s == "E_GOODS_CONFIG_INSERT_UPDATE")  { e=E_GOODS_CONFIG_INSERT_UPDATE; return 0;}
        if(s == "E_AI_CONFIG_LIST")  { e=E_AI_CONFIG_LIST; return 0;}
        if(s == "E_AI_CONFIG_INSERT_UPDATE")  { e=E_AI_CONFIG_INSERT_UPDATE; return 0;}
        if(s == "E_AI_CONFIG_DELETE")  { e=E_AI_CONFIG_DELETE; return 0;}
        if(s == "E_REWARD_POOL_MANAGER_LIST")  { e=E_REWARD_POOL_MANAGER_LIST; return 0;}
        if(s == "E_REWARD_POOL_MANAGER_INSERT_UPDATE")  { e=E_REWARD_POOL_MANAGER_INSERT_UPDATE; return 0;}
        if(s == "E_REWARD_POOL_MANAGER_DELETE")  { e=E_REWARD_POOL_MANAGER_DELETE; return 0;}
        if(s == "E_PROPS_REWARD_CONFIG_LIST")  { e=E_PROPS_REWARD_CONFIG_LIST; return 0;}
        if(s == "E_PROPS_REWARD_CONFIG_INSERT_UPDATE")  { e=E_PROPS_REWARD_CONFIG_INSERT_UPDATE; return 0;}
        if(s == "E_PROPS_REWARD_CONFIG_DELETE")  { e=E_PROPS_REWARD_CONFIG_DELETE; return 0;}
        if(s == "E_DB_CONFIG_RELOAD")  { e=E_DB_CONFIG_RELOAD; return 0;}
        if(s == "E_DB_EXCHANGECODECONFIG_RELOAD")  { e=E_DB_EXCHANGECODECONFIG_RELOAD; return 0;}
        if(s == "E_ONLINE_INFO_LIST")  { e=E_ONLINE_INFO_LIST; return 0;}
        if(s == "E_ARRANGE_CARD")  { e=E_ARRANGE_CARD; return 0;}
        if(s == "E_ADS_GOOGLE_NOTIFY")  { e=E_ADS_GOOGLE_NOTIFY; return 0;}
        if(s == "E_ADS_FACEBOOK_NOTIFY")  { e=E_ADS_FACEBOOK_NOTIFY; return 0;}
        if(s == "E_ADS_UNITY_NOTIFY")  { e=E_ADS_UNITY_NOTIFY; return 0;}
        if(s == "E_EXCHANGECODE_UPDATE")  { e=E_EXCHANGECODE_UPDATE; return 0;}
        if(s == "E_SERVER_UPDATE_NOTIFY")  { e=E_SERVER_UPDATE_NOTIFY; return 0;}
        if(s == "E_MODIFY_USER_INFO_REGISTER_TIME")  { e=E_MODIFY_USER_INFO_REGISTER_TIME; return 0;}
        if(s == "E_MODIFY_USER_INFO_SAFE_MAIL")  { e=E_MODIFY_USER_INFO_SAFE_MAIL; return 0;}

        return -1;
    }

    struct GetCardsResp : public tars::TarsStructBase
    {
    public:
        static string className()
        {
            return "gm.GetCardsResp";
        }
        static string MD5()
        {
            return "75c17c462a24641a67bf7c863841f941";
        }
        GetCardsResp()
        {
            resetDefautlt();
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(tars::TarsOutputStream<WriterT>& _os) const
        {
            if (vecHd.size() > 0)
            {
                _os.write(vecHd, 0);
            }
            if (vecComm.size() > 0)
            {
                _os.write(vecComm, 1);
            }
        }
        template<typename ReaderT>
        void readFrom(tars::TarsInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(vecHd, 0, false);
            _is.read(vecComm, 1, false);
        }
        tars::JsonValueObjPtr writeToJson() const
        {
            tars::JsonValueObjPtr p = new tars::JsonValueObj();
            p->value["vecHd"] = tars::JsonOutput::writeJson(vecHd);
            p->value["vecComm"] = tars::JsonOutput::writeJson(vecComm);
            return p;
        }
        string writeToJsonString() const
        {
            return tars::TC_Json::writeValue(writeToJson());
        }
        void readFromJson(const tars::JsonValuePtr & p, bool isRequire = true)
        {
            resetDefautlt();
            if(NULL == p.get() || p->getType() != tars::eJsonTypeObj)
            {
                char s[128];
                snprintf(s, sizeof(s), "read 'struct' type mismatch, get type: %d.", (p.get() ? p->getType() : 0));
                throw tars::TC_Json_Exception(s);
            }
            tars::JsonValueObjPtr pObj=tars::JsonValueObjPtr::dynamicCast(p);
            tars::JsonInput::readJson(vecHd,pObj->value["vecHd"], false);
            tars::JsonInput::readJson(vecComm,pObj->value["vecComm"], false);
        }
        void readFromJsonString(const string & str)
        {
            readFromJson(tars::TC_Json::getValue(str));
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.display(vecHd,"vecHd");
            _ds.display(vecComm,"vecComm");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.displaySimple(vecHd, true);
            _ds.displaySimple(vecComm, false);
            return _os;
        }
    public:
        vector<tars::Short> vecHd;
        vector<tars::Short> vecComm;
    };
    inline bool operator==(const GetCardsResp&l, const GetCardsResp&r)
    {
        return l.vecHd == r.vecHd && l.vecComm == r.vecComm;
    }
    inline bool operator!=(const GetCardsResp&l, const GetCardsResp&r)
    {
        return !(l == r);
    }
    inline ostream& operator<<(ostream & os,const GetCardsResp&r)
    {
        os << r.writeToJsonString();
        return os;
    }
    inline istream& operator>>(istream& is,GetCardsResp&l)
    {
        std::istreambuf_iterator<char> eos;
        std::string s(std::istreambuf_iterator<char>(is), eos);
        l.readFromJsonString(s);
        return is;
    }


}



#endif
